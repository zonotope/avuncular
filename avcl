#! /usr/bin/env bb

(ns avuncular
  (:require [babashka.fs :as fs]
            [babashka.http-client :as http]
            [clojure.edn :as edn]
            [clojure.string :as str]
            [cheshire.core :as json])
  (:import (java.time Instant ZonedDateTime ZoneId)
           (java.time.format DateTimeFormatter)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; http                                                                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn get-json-body
  ([url]
   (get-json-body url {}))
  ([url query-params]
   (-> url
       (http/get {:query-params query-params})
       :body
       (json/parse-string true))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; current location                                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def location-endpoint "http://ip-api.com/json")

(defn get-current-location
  []
  (get-json-body location-endpoint))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forecast                                                                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def weather-endpoint "https://api.openweathermap.org/data/2.5/onecall")

(defn weather-query-map
  [location api-key]
  (-> location
      (select-keys [:lat :lon])
      (assoc :appid api-key)))

(defn get-forecasts
  [location api-key]
  (let [query-map (weather-query-map location api-key)]
    (-> weather-endpoint
        (http/get {:query-params query-map})
        :body
        (json/parse-string true))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; temperature                                                              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn kelvin->celsius
  [temp]
  (- temp 273.15))

(defn celsius->fahrenheit
  [temp]
  (-> temp
      (* 9)
      (/ 5)
      (+ 32)
      Math/round))

(defn kelvin->fahrenheit
  [temp]
  (-> temp
      kelvin->celsius
      celsius->fahrenheit))

(defn format-fahrenheit
  [temp]
  (str temp "󰔅 "))

(defn get-fahrenheit
  [forecast]
  (-> forecast :temp kelvin->fahrenheit format-fahrenheit))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; icons                                                                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def icons
  {"01d" " "
   "01n" " "
   "02d" " "
   "02n" " "
   "03d" " "
   "03n" " "
   "04d" " "
   "04n" " "
   "09d" " "
   "09n" " "
   "10d" " "
   "10n" " "
   "11d" " "
   "11n" " "
   "13d" " "
   "13n" " "
   "50d" " "
   "50n" " "})

(defn colorize
  [s color]
  (format "<span color=\"%s\">%s</span>" color s))

(defn get-icon
  ([forecast]
   (let [icon-code (-> forecast :weather first :icon)]
     (get icons icon-code)))
  ([forecast color]
   (-> forecast
       get-icon
       (colorize color))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; formatting                                                               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn get-current-forecast
  [forecasts icon-color]
  (let [current (:current forecasts)
        icon    (get-icon current icon-color)
        temp    (get-fahrenheit current)]
    (str/join " " [icon temp])))

(defn get-hour
  [forecast tz]
  (let [fmt (DateTimeFormatter/ofPattern "hh a")
        t   (-> forecast
                :dt
                (* 1000)
                Instant/ofEpochMilli
                (ZonedDateTime/ofInstant tz))]
    (.format t fmt)))

(defn get-hourly-forecasts
  [forecasts n]
  (let [timezone (-> forecasts :timezone ZoneId/of)]
    (->> (:hourly forecasts)
         (drop 1)
         (take n)
         (map (fn [h]
                (let [temp (get-fahrenheit h)
                      icon (get-icon h)
                      hour (get-hour h timezone)]
                  (str/join " " [icon temp "|" hour]))))
         (str/join \newline))))

(defn print-forecast
  [api-key icon-color]
  (let [location   (get-current-location)
        forecasts  (get-forecasts location api-key)]
      (-> {:text    (get-current-forecast forecasts icon-color)
           :tooltip (get-hourly-forecasts forecasts 6)
           :class   "weather"}
          json/generate-string
          println)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; command line                                                             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def app-name "avuncular")
(def config-file "avcl.edn")

(def config
  (-> (fs/xdg-config-home app-name)
      (fs/file config-file)
      slurp
      edn/read-string))

(let [api-key         (:org.openweathermap/api-key config)
      icon-color      (:avuncular.icon/color config)
      update-interval (:avuncular.run/interval config)]
  (loop []
    (print-forecast api-key icon-color)
    (Thread/sleep (* update-interval 60000))
    (recur)))
