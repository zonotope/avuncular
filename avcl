#! /usr/bin/env bb

(require '[babashka.curl :as http])
(require '[babashka.deps :as deps])

(deps/add-deps '{:deps {camel-snake-kebab/camel-snake-kebab
                        {:mvn/version "0.4.2"}}})

(require '[camel-snake-kebab.core :refer [->kebab-case-keyword]])

(def config-base-dir
  (or (System/getenv "XDG_CONFIG_HOME")
      (str/join "/" [(System/getenv "HOME") ".config"])))

(def config-path
  (str/join "/" [config-base-dir "avuncular" "avcl.edn"]))

(def config
  (-> config-path slurp edn/read-string))

(def location-endpoint "http://ip-api.com/json")

(def weather-endpoint "https://api.openweathermap.org/data/2.5/onecall")

(def icons
  {"01d" " "
   "01n" " "
   "02d" " "
   "02n" " "
   "03d" " "
   "03n" " "
   "04d" " "
   "04n" " "
   "09d" " "
   "09n" " "
   "10d" " "
   "10n" " "
   "11d" " "
   "11n" " "
   "13d" " "
   "13n" " "
   "50d" " "
   "50n" " "})

(defn map->query-str
  [m]
  (->> m
       (reduce (fn [params [k v]]
                 (let [p (str/join "=" [(name k) v])]
                   (conj params p)))
               [])
       (str/join "&")))

(defn ->weather-url
  [api-key location]
  (let [query-str (-> location
                      (select-keys [:lat :lon])
                      (assoc :appid api-key)
                      map->query-str)]
    (str/join "?" [weather-endpoint query-str])))

(defn get-json-body
  [url]
  (-> url
      http/get
      :body
      (json/parse-string ->kebab-case-keyword)))

(defn query-location
  []
  (get-json-body location-endpoint))

(defn query-forecasts
  [api-key location]
  (let [url (->weather-url api-key location)]
    (get-json-body url)))

(defn kelvin->celsius
  [temp]
  (- temp 273.15))

(defn celsius->fahrenheit
  [temp]
  (-> temp
      (* 9)
      (/ 5)
      (+ 32)
      Math/round))

(defn kelvin->fahrenheit
  [temp]
  (-> temp
      kelvin->celsius
      celsius->fahrenheit))

(defn colorize
  [s color]
  (format "<span color=\"%s\">%s</span>" color s))

(defn format-fahrenheit
  [temp]
  (str temp "宅 "))

(defn get-icon
  [forecast]
  (let [icon-code (-> forecast :weather first :icon)]
    (get icons icon-code)))

(defn get-fahrenheit
  [forecast]
  (-> forecast :temp kelvin->fahrenheit format-fahrenheit))

(let [api-key    (:org.openweathermap/api-key config)
      icon-color (:icon-color config)
      location   (query-location)
      forecasts  (query-forecasts api-key location)
      current    (:current forecasts)
      icon       (-> current
                     get-icon
                     (colorize icon-color))
      temp-f   (get-fahrenheit current)
      txt      (str/join " " [icon temp-f])
      tltp     ""
      cls      "weather"]
  (-> {:text txt, :tooltip tltp, :class cls}
      json/generate-string
      println))
